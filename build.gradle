// HudPixel Buildscript.
// All important parameters are defined in gradle.properties!

buildscript {
    repositories {
        jcenter()
        maven { url = "http://files.minecraftforge.net/maven" }

        // Additionally Kotlin needs Maven Central!
        mavenCentral()
    }

    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:2.2-SNAPSHOT'

        // Additionally require Kotlin.
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
    }
}

apply plugin: 'net.minecraftforge.gradle.forge'
apply plugin: 'kotlin'

// Experimental feature which allows asynchronous programming
kotlin { experimental { coroutines 'enable' } }


// Information for the build. Composed from the values in properties.gradle.
version = project_version
group = "" // http://maven.apache.org/guides/mini/guide-naming-conventions.html
// Note that the version will be added later!
archivesBaseName = "$archive_name-$mc_version"

// From the Forge template. However we use Java 8 instead of Java 6.
sourceCompatibility = targetCompatibility = "1.8" // Need this here so eclipse task generates correctly.
compileJava {
    sourceCompatibility = targetCompatibility = "1.8"
}

// Configure the Forge version.
minecraft {
    version = "$mc_version-$forge_version-$mc_version"
    runDir = "run"
    mappings = forge_mappings
}


// Note: required means that the dependency will be copied into the jar!
configurations {
    required
    compile.extendsFrom(required)
}

// Repositories for the project.
repositories{
    jcenter()
	  mavenCentral()
}

dependencies {
    required 'joda-time:joda-time:2.9.6'
    required 'io.socket:socket.io-client:0.8.3'
    required group: 'org.slick2d', name: 'slick2d-core', version: '1.0.2'
    required "org.jetbrains.kotlin:kotlin-stdlib-jre8:$kotlin_version"
    required group: 'org.jetbrains.kotlinx', name: 'kotlinx-coroutines-core', version: '0.14.1'
}

// Copy kotlin runtimes and other required dependencies into the jar.
jar {
    dependsOn configurations.compile
    from {
        configurations.required.collect {
            it.isDirectory() ? it : zipTree(it)
        }
    }
}

// From the Forge build script. (Without change)
processResources {
    // this will ensure that this task is redone when the versions change.
    inputs.property "version", project.version
    inputs.property "mcversion", project.minecraft.version

    // replace stuff in mcmod.info, nothing else
    from(sourceSets.main.resources.srcDirs) {
        include 'mcmod.info'

        // replace version and mcversion
        expand 'version':project.version, 'mcversion':project.minecraft.version
    }

    // copy everything else except the mcmod.info
    from(sourceSets.main.resources.srcDirs) {
        exclude 'mcmod.info'
    }
}
